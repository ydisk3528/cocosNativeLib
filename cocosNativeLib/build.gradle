// ✅ 关键点1：插件
apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'stringfog'

//// ✅ 关键点2：为 JitPack/CI 提供插件与仓库（stringfog 插件需要）
//buildscript {
//    repositories {
//        google()
//        mavenCentral()
//        maven { url 'https://jitpack.io' }
//    }
//    dependencies {
//        // 如你本地已有，可与根 build.gradle 合并；JitPack 上必须能解析到
//        classpath 'com.github.megatronking:stringfog-gradle-plugin:5.2.1'
//    }
//}
//
//// ✅ 关键点3：依赖仓库（保证 CI 可解析所有依赖）
//repositories {
//    google()
//    mavenCentral()
//    maven { url 'https://jitpack.io' }
//}

android {
    namespace 'com.ytrogame.common'
    compileSdk 35

    defaultConfig {
        resValue "string", "ads_appid", "23bcbf35d"
        // 添加构建前生成资源任务
        resValue "string", "ads_native", "4x4276likjlvmwvo"
        // 添加构建前生成资源任务
        resValue "string", "ads_insertid", "iyibp75b1kbwmen5"
        // 添加构建前生成资源任务
        resValue "string", "ads_bannerid", "t05gq7r1kysakysw"
        minSdk 28
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    // ⚠️ JitPack 构建机器拿不到你本地 keystore；用“存在才配置”的方式避免失败

    publishing {
        // 告诉 AGP：我要发布 release 变体（这样才会有 components.release）
        singleVariant("release") {
            // 可选：把源码一起打进 sourcesJar，JitPack 会一起产出
            withSourcesJar()
        }
    }


    buildTypes {
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

// ===== stringfog 配置（保持你的原样）=====
import com.github.megatronking.stringfog.plugin.kg.RandomKeyGenerator
import com.github.megatronking.stringfog.plugin.StringFogMode

stringfog {
    implementation 'com.github.megatronking.stringfog.xor.StringFogImpl'
    packageName 'com.ytrogame.common'
    enable true
    kg new RandomKeyGenerator()
    mode StringFogMode.base64
}

dependencies {
    implementation "androidx.appcompat:appcompat:1.6.1"
    implementation "androidx.browser:browser:1.4.0"

    implementation 'net.lingala.zip4j:zip4j:2.11.5'
    implementation "androidx.games:games-frame-pacing:2.1.3"
    implementation "androidx.games:games-activity:4.0.0"
    implementation "androidx.games:games-controller:2.0.2"

    implementation 'top.canyie.pine:core:0.3.0'
    implementation 'com.github.megatronking.stringfog:xor:5.0.0'
    implementation 'androidx.core:core:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    // Unity Ads
    implementation 'com.unity3d.ads-mediation:mediation-sdk:8.10.0'
    implementation 'com.unity3d.ads-mediation:adquality-sdk:7.26.0'
    implementation 'com.unity3d.ads-mediation:unityads-adapter:4.3.57'
    implementation 'com.unity3d.ads:unity-ads:4.15.1'

    implementation 'com.google.android.gms:play-services-appset:16.0.0'
    // ⚠️ 只保留一个 ads-identifier（避免版本冲突）
    implementation 'com.google.android.gms:play-services-ads-identifier:18.1.0'
    implementation 'com.google.android.gms:play-services-basement:18.1.0'

    implementation 'com.android.installreferrer:installreferrer:2.2'

    implementation "androidx.work:work-runtime:2.7.1"
    implementation 'com.alibaba:fastjson:2.0.28'
    implementation 'com.appsflyer:af-android-sdk:6.12.5'
    implementation 'com.adjust.sdk:adjust-android:5.1.0'
    implementation 'com.adjust.sdk:adjust-android-webbridge:5.1.0'

    implementation "org.nanohttpd:nanohttpd:2.3.1"

    implementation "com.google.android.libraries.identity.googleid:googleid:1.1.1"
    implementation(platform("com.google.firebase:firebase-bom:32.4.0"))
    implementation("com.google.android.gms:play-services-base:18.5.0")
    implementation("com.google.firebase:firebase-analytics")
    implementation("com.alibaba.fastjson2:fastjson2:2.0.56")
    implementation("com.google.firebase:firebase-auth")
    implementation("com.google.firebase:firebase-firestore")
    implementation("com.google.firebase:firebase-messaging")
    implementation("com.google.firebase:firebase-inappmessaging-display")
    implementation 'com.google.firebase:firebase-messaging-directboot'
    implementation 'com.facebook.android:facebook-android-sdk:latest.release'
}

// ===== 构建前生成 randommaplib.txt（保持你的原样）=====
task generateRandomDictionary {
    def dictFile = file("$projectDir/randommaplib.txt")
    outputs.file dictFile
    doLast {
        dictFile.parentFile.mkdirs()
        dictFile.withWriter("UTF-8") { writer ->
            def random = new Random()
            (1..100).each { idx ->
                def name = (5..(10 + random.nextInt(15))).collect {
                    (('a'..'z') + ('A'..'Z'))[random.nextInt(52)]
                }.join("")
                writer.writeLine(name)
            }
        }
        println "✅ randommaplib.txt 已生成: ${dictFile}"
    }
}
preBuild.dependsOn(generateRandomDictionary)

// ✅ 关键点4：maven-publish —— 让 JitPack 产出 pom/aar
afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                // JitPack 规则：groupId 一定是 com.github.<GitHub用户名>
                groupId = "com.github.ydisk3528"
                artifactId = "cocosNativeLib"   // 产物名
                version = "1.0.0"               // 仅供插件使用；真正下载用 Tag

                pom {
                    name = "cocosNativeLib"
                    description = "cocos native android library"
                }
            }
        }
    }
}
